# ---- Stage 1: Builder ----
# This stage installs all dependencies and compiles the TypeScript code.
FROM node:20-alpine AS builder

# Set the working directory
WORKDIR /app

# Copy package.json and any lock file to leverage Docker's layer caching
COPY package*.json ./

# Install all dependencies (including devDependencies like TypeScript)
RUN npm install

# Copy the rest of the application source code
COPY . .

# Compile TypeScript to JavaScript using the 'build' script
# This will create a 'dist' folder with the compiled code
RUN npm run build


# ---- Stage 2: Production ----
# This stage creates the final, lightweight image with only production dependencies.
FROM node:20-alpine

WORKDIR /app

# Copy package.json and lock file again
COPY package*.json ./

# Install ONLY production dependencies to keep the image small
RUN npm install --production

# Copy the compiled application code from the builder stage
COPY --from=builder /app/dist ./dist

# The gateway listens on port 3000 as defined in server.ts
EXPOSE 3000

# The command to start the application
CMD ["node", "dist/server.js"]